import os
import cv2
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import tensorflow as tf
from tensorflow.keras import layers, models

# Load the labels from the CSV file
labels_df = pd.read_csv('rlabels.csv')  # Assuming 'rlabels.csv' contains 'FileName' and 'Label' columns

# Directory where your labeled frames are stored
base_dir = 'labeled_frames'

# Initialize lists to store file paths and labels
file_paths = []
labels = []

# Iterate through each row in the labels DataFrame
for index, row in labels_df.iterrows():
    file_name = row['FileName']
    label = row['Label']
    file_path = os.path.join( label, file_name)  # Construct the file path
    if os.path.exists(file_path):
        file_paths.append(file_path)
        labels.append(label)
    else:
        print(f"File not found: {file_path}")

# Convert labels to numeric representation
label_encoder = LabelEncoder()
encoded_labels = label_encoder.fit_transform(labels)

# Function to load and preprocess images
def load_and_preprocess_images(file_paths):
    images = []
    for file_path in file_paths:
        img = cv2.imread(file_path)
        if img is not None:
            img = cv2.resize(img, (64, 64))
            images.append(img)
        else:
            print("Failed to load:", file_path)
    return np.array(images)

# Load and preprocess images
X = load_and_preprocess_images(file_paths)
y = np.array(encoded_labels)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the RNN model
model = models.Sequential([
    layers.SimpleRNN(64, input_shape=(64, 64), activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))

# Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test)
print(f'Test Loss: {loss}, Test Accuracy: {accuracy}')
