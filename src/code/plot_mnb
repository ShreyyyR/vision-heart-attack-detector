import cv2
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

# Load the labeled data from the CSV file
data = pd.read_csv('labels.csv')

# Vectorize the text data (if applicable)
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(data['Frame'].astype(str))
y = data['Label']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the model
model = MultinomialNB()
model.fit(X_train, y_train)

# Calculate accuracy on training and testing sets
train_predictions = model.predict(X_train)
train_accuracy = accuracy_score(y_train, train_predictions)
print("Training Accuracy:", train_accuracy)

test_predictions = model.predict(X_test)
test_accuracy = accuracy_score(y_test, test_predictions)
print("Testing Accuracy:", test_accuracy)

# Function to label frames
def label_frame(frame):
    frame_text = vectorizer.transform([str(frame)])
    prediction = model.predict(frame_text)[0]
    return prediction

# Plot distribution of classes
# Plot distribution of classes
class_counts = data['Label'].value_counts()

# Plot a pie chart to show the distribution of classes
plt.figure(figsize=(8, 8))
plt.pie(class_counts, labels=class_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Classes')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

# Plot a histogram to visualize the frequency distribution of classes
plt.figure(figsize=(10, 6))
plt.hist(data['Label'], bins=len(class_counts))
plt.title('Frequency Distribution of Classes')
plt.xlabel('Classes')
plt.ylabel('Frequency')
plt.xticks(rotation=45)
plt.show()

# Open the camera
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # Perform prediction on the current frame
    prediction = label_frame(frame)

    # Display the prediction on the frame
    cv2.putText(frame, prediction, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    # Display the frame
    cv2.imshow('Frame', frame)

    # Press 'q' to exit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release video capture and close windows
cap.release()
cv2.destroyAllWindows()
